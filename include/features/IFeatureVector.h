//
// Created by dg on 11/11/19.
//

#ifndef TREEANT_IFEATUREVECTOR_H
#define TREEANT_IFEATUREVECTOR_H

// STD library
#include <memory>
#include <vector>
#include <tuple>
// Local headers
#include "nodes/INode.h"

typedef std::vector<std::size_t> partition_t;

class IFeatureVector {

public:
  // Destructor
  virtual ~IFeatureVector() = 0;

  /**
   * The abstract feature vector held by each Dataset.
   * Each concrete class should have its splitter.
   * @param validIndexes valid indexes of the database (we can specify a subset)
   * @return a tuple with the partition, the abstract node that is supposed to
   * generate it and the impurity generated by the split.
   */
  [[nodiscard]] virtual std::tuple<std::vector<partition_t>,
                                  INode*, double>
  split(const std::vector<std::size_t> &validIndexes) const = 0;

  // TODO: is it really needed?
  [[nodiscard]] virtual std::size_t size() const = 0;
};

#endif // TREEANT_IFEATUREVECTOR_H
