//
// Created by dg on 18/11/19.
//

#ifndef TREEANT_IFEATUREVECTORVISITOR_H
#define TREEANT_IFEATUREVECTORVISITOR_H

#include "types.h"
#include <tuple>

// Forward declarations
class INode;
class IFeatureVector;

// See also https://www.bfilipek.com/2019/06/fsm-variant-game.html
class IFeatureVectorVisitor {

public:
  virtual ~IFeatureVectorVisitor() = default;

  /**
   * Evaluate a generic vector of features.
   * @return a tuple containing the impurity factor, the possible node that
   * split the dataset and the partitions generated by the node
   */
  virtual void operator()(const bool_vector_t &) = 0;

  virtual void operator()(const int_vector_t &) = 0;

  virtual void operator()(const double_vector_t &) = 0;

  virtual void visitFeatureVectors(const std::vector<feature_vector_t>& featureVectors) = 0;

  [[nodiscard]] virtual IFeatureVectorVisitor* clone() const = 0;

  [[nodiscard]] virtual std::pair<INode *, partitions_t>
  getBestSplitterWithPartitions() const = 0;
};

#endif // TREEANT_IFEATUREVECTORVISITOR_H
